#!/usr/bin/env node

// Performance optimization: Directly check for version/help before loading oclif
const args = process.argv.slice(2)
const firstArg = args[0]

// Handle --version quickly without loading oclif
if (firstArg === '--version' || firstArg === '-v') {
  const { version } = require('../package.json')
  const platform = require('os').platform()
  const arch = require('os').arch()
  const nodeVersion = process.version
  console.log(`@coastal-programs/supabase-cli/${version} ${platform}-${arch} node-${nodeVersion}`)
  process.exit(0)
}

// Handle --help with minimal overhead
if (firstArg === '--help' || firstArg === '-h' || firstArg === 'help' || !firstArg) {
  const chalk = require('chalk')
  const { version, description } = require('../package.json')

  console.log(`
███████╗██╗   ██╗██████╗  █████╗ ██████╗  █████╗ ███████╗███████╗     ██████╗██╗     ██╗
██╔════╝██║   ██║██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔════╝    ██╔════╝██║     ██║
███████╗██║   ██║██████╔╝███████║██████╔╝███████║███████╗█████╗      ██║     ██║     ██║
╚════██║██║   ██║██╔═══╝ ██╔══██║██╔══██╗██╔══██║╚════██║██╔══╝      ██║     ██║     ██║
███████║╚██████╔╝██║     ██║  ██║██████╔╝██║  ██║███████║███████╗    ╚██████╗███████╗██║
╚══════╝ ╚═════╝ ╚═╝     ╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝     ╚═════╝╚══════╝╚═╝

v${version}
${description}

${chalk.bold('USAGE')}
  $ supabase-cli [COMMAND]

${chalk.bold('TOPICS')}
  ${chalk.cyan('projects')}    Manage Supabase projects
  ${chalk.cyan('db')}           Database operations and management
  ${chalk.cyan('functions')}   Edge Functions deployment and management
  ${chalk.cyan('migrations')}  Database migration management
  ${chalk.cyan('branches')}    Preview branches management
  ${chalk.cyan('storage')}     Storage buckets and policies
  ${chalk.cyan('security')}    Security audit and compliance
  ${chalk.cyan('backup')}      Backup management (read-only)
  ${chalk.cyan('config')}      CLI configuration
  ${chalk.cyan('daemon')}      Daemon mode for 10x faster execution

${chalk.bold('COMMANDS')}
  Use 'supabase-cli [TOPIC] --help' for more information about a topic

${chalk.bold('EXAMPLES')}
  $ supabase-cli projects:list
  $ supabase-cli db:query "SELECT * FROM users"
  $ supabase-cli functions:deploy my-function

${chalk.bold('DAEMON MODE (10x faster!)')}
  $ supabase-cli daemon start                    # Start daemon
  $ export SUPABASE_CLI_DAEMON=true              # Enable daemon mode
  $ supabase-cli projects:list                   # <100ms execution!

${chalk.bold('OPTIONS')}
  -v, --version    Show CLI version
  -h, --help       Show help
  --debug          Enable debug output
  -f, --format     Output format (json, table, list, yaml)

For more information, visit: https://github.com/coastal-programs/supabase-cli
`)
  process.exit(0)
}

// Check if daemon mode is enabled
const isDaemonMode = process.env.SUPABASE_CLI_DAEMON === 'true' || process.env.SUPABASE_CLI_DAEMON === '1'

// Skip daemon mode for daemon commands themselves
const isDaemonCommand = firstArg && firstArg.startsWith('daemon')

if (isDaemonMode && !isDaemonCommand) {
  // Use daemon mode for faster execution
  const path = require('path')
  const fs = require('fs')

  // Check if we have a compiled dist folder
  const distPath = path.join(__dirname, '..', 'dist')
  const hasCompiledCode = fs.existsSync(distPath)

  if (!hasCompiledCode) {
    // Development mode: use ts-node
    const project = path.join(__dirname, '..', 'tsconfig.json')
    require('ts-node').register({project})
  }

  // Load daemon lifecycle
  const { DaemonLifecycle } = require('../dist/daemon/lifecycle')
  const lifecycle = new DaemonLifecycle()

  // Parse command and flags
  const command = firstArg
  const commandArgs = []
  const flags = {}

  for (let i = 1; i < args.length; i++) {
    const arg = args[i]
    if (arg.startsWith('--')) {
      const flagName = arg.slice(2)
      if (i + 1 < args.length && !args[i + 1].startsWith('--')) {
        flags[flagName] = args[i + 1]
        i++
      } else {
        flags[flagName] = true
      }
    } else if (arg.startsWith('-')) {
      const flagName = arg.slice(1)
      if (i + 1 < args.length && !args[i + 1].startsWith('-')) {
        flags[flagName] = args[i + 1]
        i++
      } else {
        flags[flagName] = true
      }
    } else {
      commandArgs.push(arg)
    }
  }

  // Execute via daemon
  lifecycle.executeCommand(command, commandArgs, flags).catch((error) => {
    console.error('Daemon error:', error.message)
    console.error('Falling back to direct execution...')

    // Fall back to direct execution
    const oclif = require('@oclif/core')
    oclif.run().then(require('@oclif/core/flush')).catch(require('@oclif/core/handle'))
  })
} else {
  // For all other commands (or when daemon mode is disabled), load oclif normally
  const oclif = require('@oclif/core')
  const path = require('path')
  const fs = require('fs')

  // Check if we have a compiled dist folder
  const distPath = path.join(__dirname, '..', 'dist')
  const hasCompiledCode = fs.existsSync(distPath)

  if (!hasCompiledCode) {
    // Development mode: use ts-node
    const project = path.join(__dirname, '..', 'tsconfig.json')
    require('ts-node').register({project})
  }

  // Run oclif - it will use compiled code if available, ts-node if not
  oclif.run().then(require('@oclif/core/flush')).catch(require('@oclif/core/handle'))
}
