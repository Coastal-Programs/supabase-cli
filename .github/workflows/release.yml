name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      changelog:
        description: 'Changelog summary (optional - auto-generated from commits if empty)'
        required: false
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linter
        run: npm run lint

      - name: Bump version
        id: version
        run: |
          npm version ${{ github.event.inputs.version }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog entry
        id: changelog
        run: |
          if [ -n "${{ github.event.inputs.changelog }}" ]; then
            echo "Using provided changelog"
            CHANGELOG_ENTRY="${{ github.event.inputs.changelog }}"
          else
            echo "Generating changelog from commits"
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              CHANGELOG_ENTRY=$(git log --pretty=format:"- %s" --no-merges)
            else
              CHANGELOG_ENTRY=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
            fi
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_ENTRY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          DATE=$(date +%Y-%m-%d)
          TEMP_FILE=$(mktemp)

          # Create new changelog entry
          {
            head -n 6 CHANGELOG.md
            echo ""
            echo "## [${{ steps.version.outputs.new_version }}] - $DATE"
            echo ""
            echo "${{ steps.changelog.outputs.changelog }}"
            echo ""
            tail -n +7 CHANGELOG.md
          } > "$TEMP_FILE"

          mv "$TEMP_FILE" CHANGELOG.md

      - name: Commit version bump and changelog
        run: |
          git add package.json package-lock.json CHANGELOG.md README.md
          git commit -m "chore(release): v${{ steps.version.outputs.new_version }}"
          git tag -a ${{ steps.version.outputs.tag_name }} -m "Release ${{ steps.version.outputs.tag_name }}"

      - name: Push changes
        run: |
          git push origin main
          git push origin ${{ steps.version.outputs.tag_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: Release ${{ steps.version.outputs.tag_name }}
          body: |
            ## What's Changed

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            npm install -g @coastal-programs/supabase-cli@${{ steps.version.outputs.new_version }}
            ```

            ## Full Changelog

            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
